struct Header {
    u32 classId; // generated by the DagorAssetExplorer : always 0x77f8232f for rendInst
    
    u24 nodeOffset;
    u8 unknown;
    
    u32 texCnt; // 0xFFFFFFFF if we use desc files
    u32 matCnt; // 0xFFFFFFFF if we use desc files
    u32 vdataNum;
    u32 mvdHdrSz; // & 0x3FFFFFFF
    
    if (texCnt != 0xFFFFFFFF && matCnt != 0xFFFFFFFF) {
        // retrive matt and tex data
    }
};

struct CompressedData {
    u24 cSz;
    u8 cMethod;
    padding[cSz];
};

struct Vector3f {
    float x;
    float y; // z and y are inverted in dagor
    float z;
};
struct Vector4f {
    float x;
    float y;
    float z;
    float w;
};

struct BBox3f {
    Vector3f mins;
    Vector3f maxs;
};

struct ModelData {
    u32 dataSz;
    u32 vdataCnt;
    
    padding[8];
    
    BBox3f bbox;
    u32 fucked;
    Vector4f pos;
    // Vector3f scale;
    
    padding[8];
};

struct VDataInfo {
    u32 unknown0;
    u32 unknown1;
    u32 unknown2;
    u32 unknown3;
};

struct ShaderMeshData {
    u32 sz;
    u32 unknown;
    
    u32 refSz;
    
    padding[0x50 - 0x8 + 0x4];
    
    u32 t;
};

Header Hdr @ 0;
CompressedData mvd @ sizeof(Hdr);
ModelData modelData @ addressof(mvd) + sizeof(mvd);
VDataInfo vdInfo[modelData.vdataCnt] @ addressof(modelData) + sizeof(modelData);
ShaderMeshData shaderMesh[1] @ addressof(vdInfo) + sizeof(vdInfo) + 4; // modelData.vdataCnt